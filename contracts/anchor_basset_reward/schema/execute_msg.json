{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "description": "Owner's operations Swap all of the balances to uusd.",
      "type": "object",
      "required": [
        "swap_to_reward_denom"
      ],
      "properties": {
        "swap_to_reward_denom": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the global index",
      "type": "object",
      "required": [
        "update_global_index"
      ],
      "properties": {
        "update_global_index": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "bAsset's operations Increase user staking balance Withdraw rewards to pending rewards Set current reward index to global index",
      "type": "object",
      "required": [
        "increase_balance"
      ],
      "properties": {
        "increase_balance": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Decrease user staking balance Withdraw rewards to pending rewards Set current reward index to global index",
      "type": "object",
      "required": [
        "decrease_balance"
      ],
      "properties": {
        "decrease_balance": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "User's operations return the accrued reward in uusd to the user.",
      "type": "object",
      "required": [
        "claim_rewards"
      ],
      "properties": {
        "claim_rewards": {
          "type": "object",
          "properties": {
            "recipient": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
